<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Núcleo do jQuery</title>

  <section>
    <title><code>$</code> vs <code>$()</code></title>

	<para>Até agora, estivemos lidando inteiramente com métodos que são chamados
    em um objeto jQuery. Por exemplo:</para>

    <programlisting>$('h1').remove();</programlisting>

    <para>A maioria dos métodos jQuery é chamada em objetos jQuery como mostrado acima;
    esses métodos são considerados parte do namespace <code>$.fn</code>, ou
    o “protótipo do jQuery”, e são melhor imaginados como métodos do objeto
    jQuery.</para>

    <para>No entanto, há vários métodos que não atuam em uma seleção;
    esses métodos são considerados parte do namespace jQuery, e são melhor
    imaginados como métodos do núcleo do jQuery.</para>

    <para>Esta distinção pode ser incrivelmente confusa para os novos usuários do jQuery.
    Aqui está o que você precisa se lembrar:</para>

    <itemizedlist>
      <listitem>
        <para>Métodos chamados em seleções do jQuery estão no namespace
        <code>$.fn</code>, e automaticamente recebem e retornam a seleção
        como está.</para>
      </listitem>

      <listitem>
        <para>Métodos no namespace <code>$</code> geralmente são
        métodos do tipo utilitário, e não funcionam em seleções; não são passados
        quaisquer argumentos automaticamente para eles, e seu valor de retorno
        variará.</para>
      </listitem>
    </itemizedlist>

    <para>Há alguns casos onde métodos de objeto e métodos do núcleo tem os
    mesmos nomes, tal como <code>$.each</code> e <code>$.fn.each</code>. Nesses
    casos, seja extremamente cuidadoso(a) ao ler a documentação para que você
    explore o método correto.</para>
  </section>

  <section>
    <title>Métodos Utilitários</title>

    <para>jQuery oferece diversos métodos utilitários no namespace
    <code>$</code>. Estes métodos são úteis para realizar tarefas rotineiras
    de programação. Abaixo estão exemplos de alguns dos métodos utilitários; para uma
    referência completa sobre métodos utilitários do jQuery, visite <link
    xlink:href="http://api.jquery.com/category/utilities/">http://api.jquery.com/category/utilities/</link>.</para>

    <variablelist>
      <varlistentry>
        <term>$.trim</term>

        <listitem>
          <para>Remove espaços em branco à esquerda e à direita.</para>

          <programlisting>$.trim('    muitos espaços em branco extras    ');
// returns 'muitos espaços em branco extras'</programlisting>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.each</term>

        <listitem>
          <para>Itera sobre arrays e objetos.</para>

          <programlisting>$.each([ 'foo', 'bar', 'baz' ], function(idx, val) {
    console.log('elemento ' + idx + 'é ' + val);
});

$.each({ foo : 'bar', baz : 'bim' }, function(k, v) {
    console.log(k + ' : ' + v);
});</programlisting>

          <note>
            <para>Há também um método <code>$.fn.each</code>, que é usado
            para iterar sobre uma seleção de elementos.</para>
          </note>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.inArray</term>

        <listitem>
          <para>Retorna o índice de um valor em um array, ou -1 se o valor não
          estiver no array.</para>

          <programlisting>var meuArray = [ 1, 2, 3, 5 ];

if ($.inArray(4, meuArray) !== -1) {
    console.log('encontrei!');
}</programlisting>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.extend</term>

        <listitem>
          <para>Muda as propriedades do primeiro objeto usando as
          propriedades dos objetos subsequentes.</para>

          <programlisting>var primeiroObjeto = { foo : 'bar', a : 'b' };
var segundoObjeto = { foo : 'baz' };

var novoObjeto = $.extend(primeiroObjeto, segundoObjeto);
console.log(primeiroObjeto.foo); // 'baz'
console.log(novoObjeto.foo);   // 'baz'</programlisting>

          <para>Se você não quer mudar nenhum dos objetos que passa para o
          <code>$.extend</code>, passe um objeto vazio como primeiro
          argumento.</para>

          <programlisting>var primeiroObjeto = { foo : 'bar', a : 'b' };
var segundoObjeto = { foo : 'baz' };

var novoObjeto = $.extend({}, primeiroObjeto, segundoObjeto);
console.log(primeiroObjeto.foo); // 'bar'
console.log(novoObjeto.foo);   // 'baz'</programlisting>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>$.proxy</term>

        <listitem>
          <para>Retorna uma função que sempre será executada no escopo fornecido
          — isto é, seta o significado do <code>this</code> dentro da função
          passada ao segundo argumento.</para>

          <programlisting>var minhaFuncao = function() { console.log(this); };
var meuObjeto = { foo : 'bar' };

minhaFuncao(); // loga o objeto window

var minhaFuncaoComProxy = $.proxy(minhaFuncao, meuObjeto);
minhaFuncaoComProxy(); // loga o objeto meuObjeto</programlisting>

          <para>Se você tiver um objeto com métodos, pode passar o objeto
          e o nome do método para retornar uma função que sempre será
          executada no escopo do objeto.</para>

          <programlisting>var meuObjeto = {
    minhaFn : function() {
        console.log(this);
    }
};

$('#foo').click(meuObjeto.minhaFn); // loga o elemento DOM #foo
$('#foo').click($.proxy(meuObjeto, 'minhaFn')); // loga meuObjeto</programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  
  <section>
    <title>Verificando tipos</title>

    <para>Como mencionado na seção "O Básico do jQuery", jQuery oferece
    alguns métodos utilitários para determinar o tipo de um valor
    específico.</para>
    
    <example>
      <title>Verificando o tipo de um valor arbitrário</title>

      <programlisting>var meuValor = [1, 2, 3];

// Usando o operador typeof do JavaScript para testar tipos primitivos
typeof meuValor == 'string'; // false
typeof meuValor == 'number'; // false
typeof meuValor == 'undefined'; // false
typeof meuValor == 'boolean'; // false

// Usando o operador de igualdade estrita para verificar null
meuValor === null; // false

// Usando os métodos do jQuery para verificar tipos não primitivos
jQuery.isFunction(meuValor); // false
jQuery.isPlainObject(meuValor); // false
jQuery.isArray(meuValor); // true</programlisting>
    </example>
    
  </section>

  <section>
    <title>Métodos de Dados</title>

    <para>Assim que seu trabalho com o jQuery avança, você descobrirá com frequência que há
    dados sobre um elemento que você quer armazenar com o elemento. Em JavaScript
    puro, você pode fazer isso adicionando uma propriedade ao elemento do DOM, mas
    você terá que lidar com memory leaks em alguns navegadores. jQuery ofere um jeito
    simples de armazenar dados relacionados a um elemento, e gerencia
    os problemas de memória para você.</para>

    <example>
      <title>Armazenando e recuperando dados relacionados a um elemento</title>

      <programlisting>$('#meuDiv').data('nomeChave', { foo : 'bar' });
$('#meuDiv').data('nomeChave'); // { foo : 'bar' }</programlisting>
    </example>

    <para>Você pode armazenar qualquer tipo de dados em um elemento, e é difícil
    expressar a importância disto quando você está desenvolvendo uma aplicação
    complexa. Para os fins deste curso, usaremos <code>$.fn.data</code>
    na maioria das vezes para armazenar referências a outros elementos.</para>

    <para>Por exemplo, podemos querer estabelecer um relacionamento entre um item
    de lista e um div que está dentro dele. Poderíamos estabelecer este relacionamento
    cada vez que interagimos com o item de lista, mas uma solução melhor
    seria estabelecer o relacionamento uma vez, e então armazenar um ponteiro para
    o div no item de lista usando <code>$.fn.data</code>:</para>

    <example>
      <title>Armazenando um relacionamento entre elementos usando
      <code>$.fn.data</code></title>

      <programlisting>$('#minhaLista li').each(function() {
    var $li = $(this), $div = $li.find('div.content');
    $li.data('contentDiv', $div);
});

// depois não temos que procurar o div de novo;
// podemos apenas lê-lo dos dados do item de lista
var $primeiroLi = $('#minhaLista li:first');
$primeiroLi.data('contentDiv').html('novo conteúdo');</programlisting>
    </example>

    <para>Além de passar um único par chave-valor para <code>$.fn.data</code> 
    para armazenar dados, você pode passar um objeto contento um ou mais
    pares.</para>
  </section>

  <section>
    <title>Detecção de Navegador &amp; Funcionalidades</title>

    <para>Embora o jQuery elimine a maioria das peculiaridades dos navegadores, há
    ainda ocasiões quando seu código precisa saber sobre o ambiente
    do navegador.</para>

    <para>jQuery oferece o objeto <code>$.support</code>, assim como o
    objeto obsoleto <code>$.browser</code>, para este propósito. Para uma
    documentação completa sobre esses objetos, visite <link
    xlink:href="http://api.jquery.com/jQuery.support/">http://api.jquery.com/jQuery.support/</link>
    e <link
    xlink:href="http://api.jquery.com/jQuery.browser/">http://api.jquery.com/jQuery.browser/</link>.</para>

    <para>O objeto <code>$.support</code> é dedicado a determinar quais
    funcionalidades um navegador suporta; é recomendado como um método mais 
	“à prova de futuro” de customizar seu JavaScript para diferentes ambientes
    de navegador.</para>

    <para>O objeto <code>$.browser</code> foi substituído em favor do
    objeto <code>$.support</code>, mas não será removido do jQuery
    tão cedo. Ele fornece detecção direta de versão e marca
    do navegador.</para>
  </section>

  <section>
    <title>Evitando Conflitos com Outras Bibliotecas</title>

    <para>Se você está usando outra biblioteca JavaScript que usa a
    variável <code>$</code>, você pode cair em conflitos com o jQuery. Para
    evitar esses conflitos, você precisa colocar o jQuery em modo no-conflict (sem conflito)
    imediatamente depois que ele é carregado na página e antes que você tente
    usar o jQuery em sua página.</para>

    <para>Quando você coloca o jQuery em modo no-conflict, tem a opção de
    atribuir um nome de variável para substituir a <code>$</code>.</para>

    <example>
      <title>Colocando jQuery em modo no-conflict</title>

      <programlisting>&lt;script src="prototype.js"&gt;&lt;/script&gt;
&lt;script src="jquery.js"&gt;&lt;/script&gt;
&lt;script&gt;var $j = jQuery.noConflict();&lt;/script&gt;</programlisting>
    </example>

    <para>Você pode continuar a usar o <code>$</code> padrão envolvendo seu
    código em uma função anônima auto-executada; este é o modelo padrão
    para criação de plugin, onde o autor não saberá se uma outra biblioteca
    estará usando o <code>$</code>.</para>

    <example>
      <title>Usando o $ dentro de uma função anônima auto-executada</title>

      <programlisting>&lt;script src="prototype.js"&gt;&lt;/script&gt;
&lt;script src="jquery.js"&gt;&lt;/script&gt;
&lt;script&gt;
jQuery.noConflict();

(function($) {
   // seu código aqui, usando o $
})(jQuery);
&lt;/script&gt;</programlisting>
    </example>
  </section>
</chapter>
